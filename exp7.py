# -*- coding: utf-8 -*-
"""exp7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SFhVivAZaN_Nhzw5bpW_mcvfflWkv4tG
"""

import tensorflow as tf
import tensorflow_datasets as tfds
import numpy as np
import matplotlib.pyplot as plt

dataset_name="cats_vs_dogs"

dataset,info=tfds.load(dataset_name,as_supervised=True,with_info=True)

train_data=dataset['train'].take(5000)
val_data=dataset['train'].skip(20000).take(1000)

def preprocess(image,label):
  image=tf.image.resize(image,(224,224))
  image=image/255.0
  return image,label

train_data=train_data.map(preprocess).batch(128).shuffle(1000)
val_data=val_data.map(preprocess).batch(128)

base_model = tf.keras.applications.MobileNetV2(input_shape=(224, 224, 3),
                                               include_top=False,
                                               weights='imagenet')

base_model.trainable = False

model=tf.keras.Sequential([base_model,tf.keras.layers.Flatten(),tf.keras.layers.Dense(256,activation='relu'),tf.keras.layers.Dropout(0.5),tf.keras.layers.Dense(1,activation='sigmoid')])

model.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])

history=model.fit(train_data,validation_data=val_data,epochs=3)

loss, acc = model.evaluate(val_data)
print(f"\nValidation Accuracy: {acc * 100:.2f}%")

def show_prediction():
    image, label = next(iter(val_data)) # Get a batch
    img = image[0].numpy()
    true_label = label[0].numpy()
    # Moved prediction logic inside the function to access image
    prediction = model.predict(tf.expand_dims(image[0], axis=0))
    predicted_label = "Dog" if prediction[0][0] > 0.5 else "Cat"
    plt.imshow(img)
    plt.title(f"Predicted: {predicted_label}, Actual: {'Dog' if true_label else 'Cat'}")
    plt.axis("off")
    plt.show()

# Call the function to execute the prediction and display the results.
show_prediction()